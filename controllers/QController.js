import {
  fetchAnswerService,
  getSpecificQuestionService,
} from "../services/QuestionService.js";
import { findUserService } from "../services/UserService.js";
import { successResponse, errorResponse } from "../utils/helper.js";

const questionAskByUser = async (req, res) => {
  try {
    console.log("req.user", req.user);
    const { title } = req.body;
    const { id } = req.user;
    const { AI_KEY, AI_MAX_TOKEN, AI_MODEL } = process.env;

    const fetchUser = await findUserService(id);
    if (!fetchUser) {
      return res.status(400).json(errorResponse("invalid user", 400));
    }

    const fetchingAnswer = await fetchAnswerService({
      userId: id,
      title,
      ai_key: AI_KEY,
      ai_max_token: AI_MAX_TOKEN,
      ai_model: AI_MODEL,
    });

    if (fetchingAnswer.length !== 0) {
      return res
        .status(200)
        .json(
          successResponse(
            fetchingAnswer,
            "Content successfully generated by AI"
          )
        );
    } else {
      return res.status(400).json(errorResponse("Try again later"), 400);
    }
  } catch (error) {
    return res.status(500).json(errorResponse("Internal server error"), 500);
  }
};

const getSpecificQuestion = async (req, res) => {
  try {
    const { questionId } = req.params;

    const fetchingAnswer = await getSpecificQuestionService(questionId);
    if (!fetchingAnswer) {
      return res
        .status(400)
        .json(errorResponse("their is no any question exist", 400));
    }
    if (fetchingAnswer.length !== 0) {
      return res
        .status(200)
        .json(
          successResponse(
            fetchingAnswer,
            "Content successfully generated by AI"
          )
        );
    } else {
      return res.status(400).json(errorResponse("Try again later", 400));
    }
  } catch (error) {
    return res.status(500).json(errorResponse("Internal server error", 500));
  }
};

export { questionAskByUser, getSpecificQuestion };
