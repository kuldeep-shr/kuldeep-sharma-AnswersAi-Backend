import { expect as _expect } from "chai";
const expect = _expect;
import request from "supertest";
import app from "../app.js";

describe("User Flow", () => {
  let token;
  let id;
  describe("User Registration", () => {
    it("should create a new user", (done) => {
      const userData = {
        name: "Gian",
        email: "gian@example.com",
        password: "gian123",
      };

      request(app)
        .post("/api/users")
        .send(userData)
        .expect(201)
        .end((err, res) => {
          if (err) return done(err);
          expect(res.body).to.have.property("status", "success");
          expect(res.body).to.have.property(
            "message",
            "User created successfully"
          );
          expect(res.body.data).to.be.an("array").with.lengthOf(1);
          expect(res.body.data[0]).to.have.property("name", userData.name);
          expect(res.body.data[0]).to.have.property("email", userData.email);
          expect(res.body.data[0]).to.have.property("token");
          expect(res.body.data[0]).to.have.property("token_validity", "24hr");
          done();
        });
    });
  });
  describe("User Login", () => {
    it("should login successfully", (done) => {
      const userData = {
        email: "gian@example.com",
        password: "gian123",
      };

      request(app)
        .post("/api/auth/login")
        .send(userData)
        .expect(200)
        .end((err, res) => {
          if (err) return done(err);
          id = res.body.data[0].id;
          token = res.body.data[0].token;
          expect(res.body).to.have.property("status", "success");
          expect(res.body).to.have.property("message", "login successfully");
          expect(res.body.data).to.be.an("array").with.lengthOf(1);
          expect(res.body.data[0]).to.have.property("id");
          expect(res.body.data[0]).to.have.property("name");
          expect(res.body.data[0]).to.have.property("email", userData.email);
          expect(res.body.data[0]).to.have.property("token");
          expect(res.body.data[0]).to.have.property("token_validity", "24hr");
          done();
        });
    });
  });
  describe("User Details", () => {
    it("should return user details", (done) => {
      request(app)
        .get(`/api/users/${id}`)
        .set("Authorization", `Bearer ${token}`)
        .expect(200)
        .end((err, res) => {
          if (err) return done(err);

          // Assert response body properties
          expect(res.body).to.have.property("status", "success");
          expect(res.body).to.have.property("message", "user details");
          expect(res.body).to.have.property("data");
          expect(res.body.data).to.be.an("object");
          expect(res.body.data).to.have.property("id");
          expect(res.body.data).to.have.property("name");
          expect(res.body.data).to.have.property("email");
          expect(res.body.data).to.have.property("createdAt");
          expect(res.body.data).to.have.property("updatedAt");

          done();
        });
    });
  });
  describe("Asked Question", () => {
    it("should return answer", async () => {
      const questionData = {
        title: "what is 2+2?",
      };

      // Send request and wait for response
      const res = await request(app)
        .post("/api/questions")
        .send(questionData)
        .set("Authorization", `Bearer ${token}`)
        .expect(200);

      // Assert response body properties
      expect(res.body).to.have.property("status", "success");
      expect(res.body).to.have.property(
        "message",
        "Content successfully generated by AI"
      );
      expect(res.body).to.have.property("data");
      expect(res.body.data).to.be.an("array").with.lengthOf(1);

      // Assert properties of the generated content
      const content = res.body.data[0];
      expect(content).to.have.property("question", questionData.title);
      expect(content).to.have.property("questionId");
      expect(content)
        .to.have.property("answer")
        .that.is.an("array")
        .with.lengthOf.at.least(1);
      expect(content.answer[0]).to.have.property("type");
      expect(content.answer[0]).to.have.property("text").that.is.a("string");
      expect(content).to.have.property("date");
    });
  });
  describe("Questions Asked by  User", () => {
    it("should return questions asked by user", (done) => {
      // Make a GET request to the endpoint
      request(app)
        .get(`/api/users/1/questions`)
        .set("Authorization", `Bearer ${token}`)
        .expect(200) // Expect HTTP status code 200
        .end((err, res) => {
          if (err) return done(err);

          // Assert response body properties
          expect(res.body).to.have.property("status", "success");
          expect(res.body).to.have.property(
            "message",
            "questions asked by user"
          );
          expect(res.body).to.have.property("data");
          expect(res.body.data).to.be.an("array").with.lengthOf(1);
          // Loop through each question in the data array
          res.body.data.forEach((question) => {
            // Assert properties of each question
            expect(question).to.have.property("questionId");
            expect(question).to.have.property("question");
            expect(question).to.have.property("date");
            expect(question).to.have.property("user");
            expect(question.user).to.have.property("id");
            expect(question.user).to.have.property("name");
          });

          done();
        });
    });
  });
  describe("Specific Question", () => {
    it("should return answer of specific question", (done) => {
      // Make a GET request to the endpoint
      request(app)
        .get(`/api/questions/1/`)
        .set("Authorization", `Bearer ${token}`)
        .expect(200) // Expect HTTP status code 200
        .end((err, res) => {
          if (err) return done(err);

          // Assert response body properties
          expect(res.body).to.have.property("status", "success");
          expect(res.body).to.have.property(
            "message",
            "Content successfully generated by AI"
          );
          expect(res.body).to.have.property("data");
          expect(res.body.data).to.be.an("array").with.lengthOf(1);

          // Assert properties of the generated content
          const content = res.body.data[0];
          expect(content).to.have.property("question", questionData.title);
          expect(content).to.have.property("questionId");
          expect(content)
            .to.have.property("answer")
            .that.is.an("array")
            .with.lengthOf.at.least(1);
          expect(content.answer[0]).to.have.property("type");
          expect(content.answer[0])
            .to.have.property("text")
            .that.is.a("string");
          expect(content).to.have.property("date");

          done();
        });
    });
  });
});
